// Mocks generated by Mockito 5.4.4 from annotations
// in crypto_tracker/test/service/transaction_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:crypto_tracker/database/base.dart' as _i4;
import 'package:crypto_tracker/database/transaction.dart' as _i2;
import 'package:crypto_tracker/model/transaction.dart' as _i7;
import 'package:crypto_tracker/model/transaction_grouping.dart' as _i8;
import 'package:crypto_tracker/service/coins.dart' as _i3;
import 'package:crypto_tracker/service/transaction.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransactionStore_0 extends _i1.SmartFake
    implements _i2.TransactionStore {
  _FakeTransactionStore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoinsService_1 extends _i1.SmartFake implements _i3.CoinsService {
  _FakeCoinsService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseDatabase_2 extends _i1.SmartFake implements _i4.BaseDatabase {
  _FakeBaseDatabase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionService extends _i1.Mock
    implements _i5.TransactionService {
  MockTransactionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TransactionStore get transactionStore => (super.noSuchMethod(
        Invocation.getter(#transactionStore),
        returnValue: _FakeTransactionStore_0(
          this,
          Invocation.getter(#transactionStore),
        ),
      ) as _i2.TransactionStore);

  @override
  set transactionStore(_i2.TransactionStore? _transactionStore) =>
      super.noSuchMethod(
        Invocation.setter(
          #transactionStore,
          _transactionStore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.CoinsService get coinsService => (super.noSuchMethod(
        Invocation.getter(#coinsService),
        returnValue: _FakeCoinsService_1(
          this,
          Invocation.getter(#coinsService),
        ),
      ) as _i3.CoinsService);

  @override
  set coinsService(_i3.CoinsService? _coinsService) => super.noSuchMethod(
        Invocation.setter(
          #coinsService,
          _coinsService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<List<_i7.Transaction>> getTransactions(String? coinUuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [coinUuid],
        ),
        returnValue:
            _i6.Future<List<_i7.Transaction>>.value(<_i7.Transaction>[]),
      ) as _i6.Future<List<_i7.Transaction>>);

  @override
  _i6.Future<List<_i8.TransactionGrouping>> getTransactionGroupings() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionGroupings,
          [],
        ),
        returnValue: _i6.Future<List<_i8.TransactionGrouping>>.value(
            <_i8.TransactionGrouping>[]),
      ) as _i6.Future<List<_i8.TransactionGrouping>>);

  @override
  _i6.Future<int> addTransaction(_i7.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [transaction],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> deleteTransaction(String? transactionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [transactionId],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);
}

/// A class which mocks [TransactionStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionStore extends _i1.Mock implements _i2.TransactionStore {
  MockTransactionStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.BaseDatabase get baseDatabase => (super.noSuchMethod(
        Invocation.getter(#baseDatabase),
        returnValue: _FakeBaseDatabase_2(
          this,
          Invocation.getter(#baseDatabase),
        ),
      ) as _i4.BaseDatabase);

  @override
  set baseDatabase(_i4.BaseDatabase? _baseDatabase) => super.noSuchMethod(
        Invocation.setter(
          #baseDatabase,
          _baseDatabase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<List<_i7.Transaction>> getTransactions(String? coinUuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [coinUuid],
        ),
        returnValue:
            _i6.Future<List<_i7.Transaction>>.value(<_i7.Transaction>[]),
      ) as _i6.Future<List<_i7.Transaction>>);

  @override
  _i6.Future<List<_i8.TransactionGrouping>> getTransactionGroupings() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionGroupings,
          [],
        ),
        returnValue: _i6.Future<List<_i8.TransactionGrouping>>.value(
            <_i8.TransactionGrouping>[]),
      ) as _i6.Future<List<_i8.TransactionGrouping>>);

  @override
  _i6.Future<int> addTransaction(_i7.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [transaction],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> deleteTransaction(String? transactionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [transactionId],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i7.TransactionType stringToType(String? str) => (super.noSuchMethod(
        Invocation.method(
          #stringToType,
          [str],
        ),
        returnValue: _i7.TransactionType.deposit,
      ) as _i7.TransactionType);

  @override
  _i7.TransactionSource stringToSource(String? str) => (super.noSuchMethod(
        Invocation.method(
          #stringToSource,
          [str],
        ),
        returnValue: _i7.TransactionSource.manual,
      ) as _i7.TransactionSource);
}
